# Generated by Django 5.1.1 on 2024-10-02 18:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('achievement_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID достижения')),
                ('photo', models.ImageField(help_text='Фотография достижения', upload_to='achievements/', verbose_name='Фото')),
                ('title', models.CharField(help_text='Заголовок достижения', max_length=30, verbose_name='Заголовок')),
                ('description', models.TextField(help_text='Описание достижения', verbose_name='Описание')),
                ('xp_reward', models.PositiveIntegerField(help_text='Количество опыта за получение достижения', verbose_name='Награда за выполнение (XP)')),
                ('coins_reward', models.PositiveIntegerField(help_text='Количество монет за получение достижения', null=True, verbose_name='Награда за выполнение (монеты)')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID товара')),
                ('title', models.CharField(help_text='Название товара', max_length=50, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Описание товара', null=True, verbose_name='Описание')),
                ('price', models.PositiveIntegerField(default=0, help_text='Цена товара', verbose_name='Цена')),
                ('photo', models.ImageField(blank=True, help_text='Фотография товара', null=True, upload_to='products/', verbose_name='Фото')),
                ('is_available', models.BooleanField(default=True, help_text='Флаг, показывающий, доступен ли товар', verbose_name='Доступен')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-price'],
            },
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('rank_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID звания')),
                ('title', models.CharField(max_length=50, verbose_name='Звание')),
                ('level', models.PositiveIntegerField(verbose_name='Уровень')),
                ('required_xp', models.PositiveIntegerField(verbose_name='Требуемый опыт')),
                ('bonus_coins', models.PositiveIntegerField(verbose_name='Надбавка (монеты)')),
            ],
            options={
                'verbose_name': 'Звание',
                'verbose_name_plural': 'Звания',
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('status_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID статуса')),
                ('title', models.CharField(help_text='Заголовок статуса', max_length=30, verbose_name='Заголовок')),
            ],
            options={
                'verbose_name': 'Статус',
                'verbose_name_plural': 'Статусы',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, help_text='Отчество пользователя', max_length=150, null=True, verbose_name='Отчество')),
                ('photo', models.ImageField(blank=True, help_text='Фотография пользователя', null=True, upload_to='photos/', verbose_name='Фото')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID уведомления')),
                ('message', models.TextField(verbose_name='Сообщение')),
                ('is_read', models.BooleanField(default=False, verbose_name='Прочитано')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Уведомления',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Инвентарь',
                'verbose_name_plural': 'Инвентари',
                'ordering': ['-date_added'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID команды')),
                ('photo', models.ImageField(blank=True, help_text='Фотография команды', null=True, upload_to='teams/', verbose_name='Фото')),
                ('title', models.CharField(help_text='Заголовок команды', max_length=30, verbose_name='Заголовок')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания команды', verbose_name='Дата создания')),
                ('xp', models.PositiveIntegerField(default=0, help_text='Опыт команды', verbose_name='Опыт')),
                ('owner', models.ForeignKey(help_text='Владелец команды', on_delete=django.db.models.deletion.CASCADE, related_name='owned_teams', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Команда',
                'verbose_name_plural': 'Команды',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('task_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID задачи')),
                ('title', models.CharField(help_text='заголовок задачи', max_length=30, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, help_text='Описание задачи', null=True, verbose_name='Описание')),
                ('xp_reward', models.PositiveIntegerField(help_text='Количество опыта за выполнение задачи', verbose_name='Награда за выполнение (XP)')),
                ('coins_reward', models.PositiveIntegerField(help_text='Количество монет за выполнение задачи', verbose_name='Награда за выполнение (монеты)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания задачи', verbose_name='Дата создания')),
                ('deadline', models.DateTimeField(blank=True, help_text='Крайний срок выполнения задачи', null=True, verbose_name='Крайний срок')),
                ('status', models.ForeignKey(default=1, help_text='Статус выполнения задачи', on_delete=django.db.models.deletion.CASCADE, to='gamification.status', verbose_name='Статус')),
                ('team', models.ForeignKey(blank=True, help_text='Команда, к которой относится задача', null=True, on_delete=django.db.models.deletion.CASCADE, to='gamification.team', verbose_name='Команда')),
            ],
            options={
                'verbose_name': 'Задача',
                'verbose_name_plural': 'Задачи',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('xp', models.PositiveIntegerField(default=0, help_text='Кол-во опыта пользователя', verbose_name='Опыт')),
                ('level', models.PositiveIntegerField(default=1, help_text='Уровень пользователя', verbose_name='Уровень')),
                ('coins', models.PositiveIntegerField(default=0, help_text='Монеты пользователя', verbose_name='Монеты')),
                ('rank', models.ForeignKey(blank=True, default=1, help_text='Звание пользователя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.rank', verbose_name='Звание')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='AchievementEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='Дата получения достижения', verbose_name='Дата получения')),
                ('achievement', models.ForeignKey(help_text='Достижение', on_delete=django.db.models.deletion.CASCADE, related_name='achievers', to='gamification.achievement', verbose_name='Достижение')),
                ('employee', models.ForeignKey(help_text='Сотрудник', on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
            ],
            options={
                'verbose_name': 'Полученное достижение',
                'verbose_name_plural': 'Полученные достижения',
                'unique_together': {('achievement', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='TaskEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('took_at', models.DateTimeField(auto_now_add=True, help_text='Дата, когда задача была взята в работу', verbose_name='Дата взятия задачи')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Дата, когда задача была завершена', null=True, verbose_name='Дата завершения задачи')),
                ('employee', models.ForeignKey(help_text='Сотрудник', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
                ('status', models.ForeignKey(default=1, help_text='Статус выполнения задачи', null=True, on_delete=django.db.models.deletion.CASCADE, to='gamification.status', verbose_name='Статус')),
                ('task', models.ForeignKey(help_text='Задача', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='gamification.task', verbose_name='Задача')),
            ],
            options={
                'verbose_name': 'Назначение задачи',
                'verbose_name_plural': 'Назначение задач',
                'unique_together': {('task', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='TeamEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee', models.ForeignKey(help_text='Сотрудник', on_delete=django.db.models.deletion.CASCADE, related_name='teams', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
                ('team', models.ForeignKey(help_text='Команда', on_delete=django.db.models.deletion.CASCADE, related_name='members', to='gamification.team', verbose_name='Команда')),
            ],
            options={
                'verbose_name': 'Член команды',
                'verbose_name_plural': 'Члены команды',
                'unique_together': {('team', 'employee')},
            },
        ),
    ]
